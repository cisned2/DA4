
DA4_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083b  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020b  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
#include <util/delay.h>
#include <avr/interrupt.h>

int temp; //variable to hold ADC value
	
	ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
		ADCSRA |= (1 << ADIF); //set ADIF 1
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	80 83       	st	Z, r24
		temp = ADCH; //read conversion from ADCH register
  ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		//PORTD = temp; //output ADC value
		//OCR1A = temp;
	}
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
	DDRD = 0b00001111; //set PIND0-PIND3 to output
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	8a b9       	out	0x0a, r24	; 10
	
	//set to CTC mode
	TCCR1A = 0; //set WGM11 = 0, WGM10 = 0
  d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 13; //set WGM12 = 1, WGM13 = 0, prescale = 1024
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 23000; //set Output Compare Register to calculated count(compared
  da:	88 ed       	ldi	r24, 0xD8	; 216
  dc:	99 e5       	ldi	r25, 0x59	; 89
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADSC) | (1 << ADATE) | (1 << ADIE);//enable ADC interrupt set channel to take input for ADC0(changed to ADC1),left adjust,AVcc with external cap at AREF (You can ignore connecting external capacitor at AREF)
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8e 6e       	ori	r24, 0xEE	; 238
  ee:	80 83       	st	Z, r24
		
	ADMUX |= (1 << ADLAR) | (1 << REFS0) | (1 << MUX0); //ADC prescaler 64, enable ADC,Start conversion,enable auto trigger (free running mode)
  f0:	ec e7       	ldi	r30, 0x7C	; 124
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 66       	ori	r24, 0x61	; 97
  f8:	80 83       	st	Z, r24
	
	sei();
  fa:	78 94       	sei
	{

		//if((TIFR1 & (1 << OCF1A)) == 0){ //check if flag is set
			for(int i=0;i<temp;i++)
				_delay_ms(1);
			PORTD = 1; //black
  fc:	71 e0       	ldi	r23, 0x01	; 1
			for(int i=0;i<temp;i++)
				_delay_ms(1);		
			PORTD = 2; //red
  fe:	62 e0       	ldi	r22, 0x02	; 2
			for(int i=0;i<temp;i++)
				_delay_ms(1);
			PORTD = 4; //green
 100:	54 e0       	ldi	r21, 0x04	; 4
			for(int i=0;i<temp;i++)
				_delay_ms(1);
			PORTD = 8; //blue
 102:	48 e0       	ldi	r20, 0x08	; 8
	sei();
	while (1)
	{

		//if((TIFR1 & (1 << OCF1A)) == 0){ //check if flag is set
			for(int i=0;i<temp;i++)
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	84 f4       	brge	.+32     	; 0x132 <main+0x66>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ef ec       	ldi	r30, 0xCF	; 207
 118:	f7 e0       	ldi	r31, 0x07	; 7
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x4e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x54>
 120:	00 00       	nop
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 128:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 12c:	82 17       	cp	r24, r18
 12e:	93 07       	cpc	r25, r19
 130:	94 f3       	brlt	.-28     	; 0x116 <main+0x4a>
				_delay_ms(1);
			PORTD = 1; //black
 132:	7b b9       	out	0x0b, r23	; 11
			for(int i=0;i<temp;i++)
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	84 f4       	brge	.+32     	; 0x162 <main+0x96>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	ef ec       	ldi	r30, 0xCF	; 207
 148:	f7 e0       	ldi	r31, 0x07	; 7
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x7e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x84>
 150:	00 00       	nop
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 158:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 15c:	82 17       	cp	r24, r18
 15e:	93 07       	cpc	r25, r19
 160:	94 f3       	brlt	.-28     	; 0x146 <main+0x7a>
				_delay_ms(1);		
			PORTD = 2; //red
 162:	6b b9       	out	0x0b, r22	; 11
			for(int i=0;i<temp;i++)
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16c:	18 16       	cp	r1, r24
 16e:	19 06       	cpc	r1, r25
 170:	84 f4       	brge	.+32     	; 0x192 <main+0xc6>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ef ec       	ldi	r30, 0xCF	; 207
 178:	f7 e0       	ldi	r31, 0x07	; 7
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xae>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xb4>
 180:	00 00       	nop
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 188:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	94 f3       	brlt	.-28     	; 0x176 <main+0xaa>
				_delay_ms(1);
			PORTD = 4; //green
 192:	5b b9       	out	0x0b, r21	; 11
			for(int i=0;i<temp;i++)
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 19c:	18 16       	cp	r1, r24
 19e:	19 06       	cpc	r1, r25
 1a0:	84 f4       	brge	.+32     	; 0x1c2 <main+0xf6>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ef ec       	ldi	r30, 0xCF	; 207
 1a8:	f7 e0       	ldi	r31, 0x07	; 7
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0xde>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xe4>
 1b0:	00 00       	nop
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1bc:	82 17       	cp	r24, r18
 1be:	93 07       	cpc	r25, r19
 1c0:	94 f3       	brlt	.-28     	; 0x1a6 <main+0xda>
				_delay_ms(1);
			PORTD = 8; //blue
 1c2:	4b b9       	out	0x0b, r20	; 11
				TIFR1 |= (1 << OCF1A); //clear flag
 1c4:	b1 9a       	sbi	0x16, 1	; 22
	}
 1c6:	9e cf       	rjmp	.-196    	; 0x104 <main+0x38>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
