
DA4_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000755  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039c  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
int temp=0;

ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	EIFR |= (INTF0 << 1); // clear INT0 flag
  9e:	8c b3       	in	r24, 0x1c	; 28
  a0:	8c bb       	out	0x1c, r24	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f e1       	ldi	r24, 0x1F	; 31
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <__vector_1+0x16>
  aa:	00 c0       	rjmp	.+0      	; 0xac <__vector_1+0x1c>
  ac:	00 00       	nop
	_delay_ms(10);
	//toggle on and off
	if(temp == 0)
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	39 f4       	brne	.+14     	; 0xc8 <__vector_1+0x38>
		temp = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <__vector_1+0x44>
	else if(temp == 1)
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	21 f4       	brne	.+8      	; 0xd4 <__vector_1+0x44>
		temp = 0;
  cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:

int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <main+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << PINB1); //use PINB1 as output for input of motor driver
  ec:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << PIND0); //use PIND0 as output for input of driver enable
  ee:	50 9a       	sbi	0x0a, 0	; 10

	EIMSK = (1 << INT0); //activate external interrupt
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1 << ISC01 ) | (1 << ISC00); //activate external interrupt on rising edge
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10); //prescale to 1024
  fa:	e1 e8       	ldi	r30, 0x81	; 129
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8d 60       	ori	r24, 0x0D	; 13
 102:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1) | (1 << COM1A1) | (1 << WGM11) | (1 << WGM10); //set mode to PWM with TOP 1024
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	83 6a       	ori	r24, 0xA3	; 163
 10c:	80 83       	st	Z, r24
	
	//set channel to take input for ADC0(changed to ADC1),left adjust,AVcc with external cap at AREF
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADSC) | (1 << ADATE);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	86 6e       	ori	r24, 0xE6	; 230
 116:	80 83       	st	Z, r24

	ADMUX |= (1 << MUX0); //ADC prescaler 64,	enable ADC,Start conversion,enable auto trigger (free running mode)
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
	sei();
 122:	78 94       	sei
	
	while (1)
	{
		volatile int ad;
		while ((ADCSRA & (1 << ADIF)) == 0); //check if ADIF is 1, if not stay here
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
		ADCSRA |= (1 << ADIF); //set ADIF 1
		ad = ADC << 2; //read conversion from ADC register
 128:	28 e7       	ldi	r18, 0x78	; 120
 12a:	30 e0       	ldi	r19, 0x00	; 0
		OCR1A = ad;
 12c:	68 e8       	ldi	r22, 0x88	; 136
 12e:	70 e0       	ldi	r23, 0x00	; 0
		if(temp == 1) //if on turn on enable
			PORTD = 1;
 130:	41 e0       	ldi	r20, 0x01	; 1
	sei();
	
	while (1)
	{
		volatile int ad;
		while ((ADCSRA & (1 << ADIF)) == 0); //check if ADIF is 1, if not stay here
 132:	80 81       	ld	r24, Z
 134:	84 ff       	sbrs	r24, 4
 136:	fd cf       	rjmp	.-6      	; 0x132 <main+0x50>
		ADCSRA |= (1 << ADIF); //set ADIF 1
 138:	80 81       	ld	r24, Z
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	80 83       	st	Z, r24
		ad = ADC << 2; //read conversion from ADC register
 13e:	d9 01       	movw	r26, r18
 140:	8d 91       	ld	r24, X+
 142:	9c 91       	ld	r25, X
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	89 83       	std	Y+1, r24	; 0x01
		OCR1A = ad;
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	db 01       	movw	r26, r22
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	9c 93       	st	X, r25
 15a:	8e 93       	st	-X, r24
		if(temp == 1) //if on turn on enable
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	11 f4       	brne	.+4      	; 0x16e <main+0x8c>
			PORTD = 1;
 16a:	4b b9       	out	0x0b, r20	; 11
 16c:	e2 cf       	rjmp	.-60     	; 0x132 <main+0x50>
		else if(temp == 0) //if off turn off enable
 16e:	89 2b       	or	r24, r25
 170:	01 f7       	brne	.-64     	; 0x132 <main+0x50>
			PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
 174:	de cf       	rjmp	.-68     	; 0x132 <main+0x50>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
